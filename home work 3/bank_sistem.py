# –ó–¥–µ—Å—å –º—ã –≤—Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º
from aiogram import Bot, Dispatcher, types, executor
from logging import basicConfig, INFO
# from config import token_3
token_3 = "6407838890:AAEzapSdEMaREqWalJf4LWApcC0qoHpH17M"
import sqlite3
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
# —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
connection = sqlite3.connect('bank_sistem')
cursor = connection.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS bank_users (
               user_id INTEGER PRIMARY KEY,
               first_name VARCHAR (200),
               last_name VARCHAR (100),
               balance INTEGER  DEFAULT 0,
               number_number INTEGER
);""")
connection.commit()

bot = Bot(token=token_3)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
basicConfig(level=INFO)
# –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands='start')
async def regist(message: types.Message):
    await message.answer('''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!
–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç —É–ø—Ä–æ–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ —Å—á–µ—Ç–∞–º–∏ –≤ –Ω–∞—à–µ–º –±–∞–Ω–∫–µ!
–í–æ—Ç –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–∞–Ω–∫–∞:
/start - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å –∏ —Å–∞–º–æ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!
/balance - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞!
/replenishment - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞!
/transfer - –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ —Å –ø–æ–º–æ—â—é –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞!
–†–∞–¥—ã –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É!
''')
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM bank_users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    
    first_name = message.from_user.first_name
    last_name =  message.from_user.last_name
    user_number_balans = message.from_user.id
    
    if not user:
        cursor.execute('INSERT INTO bank_users (user_id, last_name, first_name, number) VALUES(?,?,?,?);', (user_id, first_name, last_name, user_number_balans))
        connection.commit()
        await message.answer(f'''–ø–æ–∑–¥—Ä–æ–≤–ª—è–µ–º {first_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n—Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏!
–≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
–ò–º—è: {first_name}
–§–∞–º–∏–ª–∏—è: {last_name}
–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞: {user_id}
''')
    else:
        await message.answer(f'''{first_name} –≤—ã –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏!
–≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
–ò–º—è: {first_name}
–§–∞–º–∏–ª–∏—è: {last_name}
–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞: {user_id}
''')

@dp.message_handler(commands='balance')
async def balance(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT balance FROM bank_users WHERE user_id = ?', (user_id,))
    balance = cursor.fetchone()[0]
    await message.answer(f'–≤–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Å–æ–º–æ–≤')
    if balance == 0:
        await message.answer('—É –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –Ω–∞—à–µ–º –±–∞–Ω–∫–µ\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ /replenishment')

class Replenish(StatesGroup):
    money = State()

@dp.message_handler(commands='replenishment')
async def replenish_balance(message: types.Message, state:FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:\n')
    await Replenish.money.set()


@dp.message_handler(state=Replenish.money)
async def replenish_finish(message: types.Message, state: FSMContext):
    await state.update_data(money=message.text)
    money_data = await state.get_data()
    summ = money_data.get('money')

    user_id = message.from_user.id
    cursor.execute('SELECT balance FROM bank_users WHERE user_id = ?', (user_id,))
    current_balans = cursor.fetchone()[0]

    result = current_balans + int(summ)

    cursor.execute('UPDATE bank_users SET balance = ? WHERE user_id = ?', (result, user_id))
    connection.commit()

    await message.answer(f'–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {result} —Å–æ–º!')

class Translation(StatesGroup):
    summ_2 = State()
    user_chek = State()
# —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã /transfer
@dp.message_handler(commands='transfer')
async def transfer(message: types.Message, state:FSMContext):
    await message.answer('–î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ c—É–º–º—É:\n')
    await Translation.summ_2.set()

@dp.message_handler(state=Translation.summ_2)
async def get_user_chek(message: types.Message, state:FSMContext):
    await state.update_data(summ_2 = message.text)
    await message.answer('–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞:')
    await Translation.user_chek.set()

@dp.message_handler(state=Translation.user_chek)
async def finish(message: types.Message, state: FSMContext):
    await state.update_data(user_chek=message.text)
    user_id = message.from_user.id
    data = await state.get_data()
    amount = data.get('summ_2')
    recipient_user_id = data.get('user_chek')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    cursor.execute('SELECT * FROM bank_users WHERE user_id = ?', (recipient_user_id,))
    recipient = cursor.fetchone()

    if recipient:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
        cursor.execute('SELECT balance FROM bank_users WHERE user_id = ?', (user_id,))
        sender_balance = cursor.fetchone()[0]

        if sender_balance >= int(amount):
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            sender_new_balance = sender_balance - int(amount)
            recipient_new_balance = recipient[3] + int(amount)

            cursor.execute('UPDATE bank_users SET balance = ? WHERE user_id = ?', (sender_new_balance, user_id))
            cursor.execute('UPDATE bank_users SET balance = ? WHERE user_id = ?', (recipient_new_balance, recipient_user_id))

            connection.commit()

            await message.answer(f'–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n'
                                 f'–°—É–º–º–∞: {amount} —Å–æ–º\n'
                                 f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_id}\n'
                                 f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_user_id}\n'
                                 f'–ë–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {sender_new_balance} —Å–æ–º\n'
                                 f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {recipient_new_balance} —Å–æ–º')
        else:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞.')
    else:
        await message.answer('–ü–æ–ª—É—á–∞—Ç–µ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.')

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()



@dp.message_handler()
async def none_message(message: types.Message):
    await message.answer('–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –¥–∞–ª–∏ –Ω–µ —Ç—É –∫–æ–º–∞–Ω–¥—Éüò•\n–Ω–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–º–∏—Ü–∞ —Å –Ω–∞–º–∏ –∏ —Å –Ω–∞—à–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏üòÜ')

executor.start_polling(dp)